openapi: "3.0.3"
info:
  title: API do Petshop
  description: API responsável pelo gerenciamento de usuários, pets e serviços
  version: 1.0.0
  contact: 
    name: Tiago F. Hinterholz
    url: https://github.com/tiagohinterholz/Petshop_API
    email: fh.tiago@gmail.com
servers:
  - url: http://localhost:5000
  
tags:
  - name: "Auth"
    description: "Endpoint relacionado à autenticação"
  - name: "Addresses"
    description: "Endpoint relacionado à endereços"
  - name: "Appointments"
    description: "Endpoint relacionado à agendamentos"
  - name: "Breeds"
    description: "Endpoint relacionado à raças"
  - name: "Clients"
    description: "Endpoint relacionado à clientes"
  - name: "Contacts"
    description: "Endpoint relacionado à contatos"
  - name: "Pets"
    description: "Endpoint relacionado à pets"
  - name: "Users"
    description: "Endpoint relacionado à usuários"

paths:

  /addresses:
    post:
      tags:
        - 'Addresses'
      operationId: cadastrarAddress
      summary: Cadastro de Endereços
      security:
        - JWT: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AddressesRequest'
      responses:
        '201':
         description: "Endereço cadastrado com sucesso"
         content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AddressesResponse'
        '400':
          description: "Problema nos dados de cadastro"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuário não autenticado para esta operação"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response' 
        '404':
          description: "Cliente informado não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '409':
          description: "Cliente informado já possui endereço cadastrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error409Response'
        '500':
          description: "Erro inesperado ao cadastrar endereço"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
    get:
      tags:
        - 'Addresses'
      operationId: listarAddress
      summary: Listagem de Endereços
      security:
        - JWT: []
      responses:
        '200':
          description: "Listagem de Endereços realizada com sucesso"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AddressesResponse'
        '401':
          description: 'Usuário não autorizado'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '403':
          description: 'Recurso permitido somente para Administradores'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error403Response'
        '500':
          description: 'Erro interno do servidor'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
  
  /addresses/{address_id}:
    get:
      tags:
        - 'Addresses'
      operationId: detalharAddress
      summary: "Detalhar Endereço do Cliente pelo address_id"
      parameters:
        - name: address_id
          in: path
          description: "ID do endereço a ser detalhado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      responses:
        '200':
          description: "Endereço detalhado com sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressesResponse"
        '400':
          description: "Dados inseridos inválidos"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuario não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '403':
          description: "Acesso somente aos próprios dados"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error403Response'
        '404':
          description: "Endereço não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'   
        '500':
          description: 'Erro interno do servidor'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
    put:
      tags:
        - 'Addresses'
      summary: "Atualizar Endereço de Cliente pelo address_id"
      operationId: atualizarAddress
      parameters:
        - name: address_id
          in: path
          description: "ID do endereço a ser atualizado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/AddressesRequest"
      responses:
        '200':
          description: "Endereço atualizado com sucesso"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AddressesResponse'
        '400':
          description: "Dados inseridos inválidos"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuario não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '403':
          description: "Permitido somente atualizar os pŕoprios dados"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error403Response' 
        '404':
          description: "Endereço ou cliente informado não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response' 
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
    delete:
      tags:
        - 'Addresses'
      operationId: deletarAddress
      summary: "Deletar Endereço pelo address_id"
      parameters:
        - name: address_id
          in: path
          description: "ID do Endereço a ser deletado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      responses:
        '200':
          description: "Endereço deletado com sucesso"
        '401':
          description: "Usuário não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '403':
          description: "Acesso negado. Somente administradores"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '404':
          description: "Endereço não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
  
  /appointments:
    post:
      tags:
        - 'Appointments'
      operationId: cadastrarBreed
      summary: Cadastro de Agendamento de Pets
      security:
        - JWT: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AppointmentsRequest'
      responses:
        '201':
         description: "Agendamento cadastrado com sucesso"
         content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AppointmentsResponse'
        '400':
          description: "Problema nos dados de cadastro"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuário não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response' 
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
    get:
      tags:
        - 'Appointments'
      operationId: listarAppointments
      summary: Listagem de Agendamentos de Pets
      security:
        - JWT: []
      responses:
        '200':
          description: "Listagem de agendamentos realizada com sucesso"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppointmentsResponse'
        '401':
          description: 'Usuário não autorizado'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
  
  /appointments/{appointment_id}:
    get:
      tags:
        - 'Appointments'
      operationId: detalharAppointment
      summary: "Detalhar Agendamento de Pet pelo appointment_id"
      parameters:
        - name: appointment_id
          in: path
          description: "ID do agendamento a ser detalhado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      responses:
        '200':
          description: "Agendamento detalhada com sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentsResponse"
        '400':
          description: "Dados inseridos inválidos"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuario não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Agendamento não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'   
    put:
      tags:
        - 'Appointments'
      summary: "Atualizar Agendamento de Pets pelo appointment_id"
      operationId: atualizarContact
      parameters:
        - name: breed_id
          in: path
          description: "ID do Agendamento do Pet a ser atualizado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/AppointmentsRequest"
      responses:
        '200':
          description: "Agendamento atualizado com sucesso"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AppointmentsResponse'
        '400':
          description: "Dados inseridos inválidos"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuario não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Agendamento não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
    delete:
      tags:
        - 'Appointments'
      operationId: deletarAppointment
      summary: "Deletar Agendamento de Pet pelo appointment_id"
      parameters:
        - name: appointment_id
          in: path
          description: "ID do Agendamento a ser deletado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      responses:
        '200':
          description: "Agendamento deletado com sucesso"
        '401':
          description: "User não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Agendamento não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: "Erro ao excluir raça"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'

  /breeds:
    post:
      tags:
        - 'Breeds'
      operationId: cadastrarBreed
      summary: Cadastro de Raças de Pets
      security:
        - JWT: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/BreedsRequest'
      responses:
        '201':
         description: "Breed cadastrada com sucesso"
         content:
          'application/json':
            schema:
              $ref: '#/components/schemas/BreedsResponse'
        '400':
          description: "Problema nos dados de cadastro"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuário não autenticado para esta operação"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response' 
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
    get:
      tags:
        - 'Breeds'
      operationId: listarContacts
      summary: Listagem de Raças de Pets
      security:
        - JWT: []
      responses:
        '200':
          description: "Listagem de raças realizada com sucesso"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BreedsResponse'
        '401':
          description: 'Usuário não autorizado'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
  
  /breeds/{breed_id}:
    get:
      tags:
        - 'Breeds'
      operationId: detalharContact
      summary: "Detalhar Raça do Pet pelo breed_id"
      parameters:
        - name: breed_id
          in: path
          description: "ID da raça a ser detalhado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      responses:
        '200':
          description: "Raça detalhada com sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BreedsResponse"
        '400':
          description: "Dados inseridos inválidos"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuario não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Raça não encontrada"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'   
    put:
      tags:
        - 'Breeds'
      summary: "Atualizar cadastro de Raças pelo breed_id"
      operationId: atualizarContact
      parameters:
        - name: breed_id
          in: path
          description: "ID da Raça do Pet a ser atualizada"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/BreedsRequest"
      responses:
        '200':
          description: "Raça atualizada com sucesso"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BreedsResponse'
        '400':
          description: "Dados inseridos inválidos"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuario não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Raça não encontrada"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response' 
    delete:
      tags:
        - 'Breeds'
      operationId: deletarBreed
      summary: "Deletar Raça pelo breed_id"
      parameters:
        - name: breed_id
          in: path
          description: "ID da raça a ser deletada"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      responses:
        '200':
          description: "Raça deletada com sucesso"
        '401':
          description: "User não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Raça não encontrada"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'

  /clients:
    post:
      tags:
        - 'Clients'
      operationId: cadastrarClient
      summary: Cadastro de Clientes
      security:
        - JWT: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ClientsRequest'
      responses:
        '201':
         description: "Client cadastrado com sucesso"
         content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ClientsResponse'
        '400':
          description: "Problema nos dados de cadastro"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuário não autenticado para esta operação"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response' 
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
    get:
      tags:
        - 'Clients'
      operationId: listarClients
      summary: Listagem de Clientes
      security:
        - JWT: []
      responses:
        '200':
          description: "Listagem de clientes realizada com sucesso"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientsResponse'
        '401':
          description: 'Usuário não autorizado'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'    
  
  /clients/{client_id}:
    get:
      tags:
        - 'Clients'
      operationId: detalharClient
      summary: "Detalhar Cliente pelo client_id"
      parameters:
        - name: client_id
          in: path
          description: "ID do cliente a ser detalhado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      responses:
        '200':
          description: "Cliente detalhado com sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientsResponse"
        '400':
          description: "Dados inseridos inválidos"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuario não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Cliente não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'   
    delete:
      tags:
        - 'Clients'
      operationId: deletarClient
      summary: "Deletar Cliente pelo client_id"
      parameters:
        - name: client_id
          in: path
          description: "ID do cliente a ser deletado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      responses:
        '200':
          description: "Client deletado com sucesso"
        '401':
          description: "Usuário não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '403':
          description: "Permissão negada. Acesso somente para administradores"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error403Response'
        '404':
          description: "Cliente não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'

  /contacts:
    post:
      tags:
        - 'Contacts'
      operationId: cadastrarContact
      summary: Cadastro de Contatos
      security:
        - JWT: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ContactsRequest'
      responses:
        '201':
         description: "Contact cadastrado com sucesso"
         content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ContactsResponse'
        '400':
          description: "Problema nos dados de cadastro"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuário não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response' 
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
    get:
      tags:
        - 'Contacts'
      operationId: listarContacts
      summary: Listagem de Contatos
      security:
        - JWT: []
      responses:
        '200':
          description: "Listagem de contatos realizada com sucesso"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactsResponse'
        '401':
          description: 'Usuário não autorizado'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
  
  /contacts/{contact_id}:
    get:
      tags:
        - 'Contacts'
      operationId: detalharContact
      summary: "Detalhar Contato pelo contact_id"
      parameters:
        - name: contact_id
          in: path
          description: "ID do contato a ser detalhado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      responses:
        '200':
          description: "Contato detalhado com sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactsResponse"
        '400':
          description: "Dados inseridos inválidos"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuario não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Contato não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'   
    put:
      tags:
        - 'Contacts'
      summary: "Atualizar cadastro de Contato pelo contact_id"
      operationId: atualizarContact
      parameters:
        - name: contact_id
          in: path
          description: "ID do contato a ser atualizado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/ContactsRequest"
      responses:
        '200':
          description: "Contact atualizado com sucesso"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ContactsResponse'
        '400':
          description: "Dados inseridos inválidos"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuario não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Contato não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response' 
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
    delete:
      tags:
        - 'Contacts'
      operationId: deletarContact
      summary: "Deletar Contato pelo contact_id"
      parameters:
        - name: contact_id
          in: path
          description: "ID do contato a ser deletado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      responses:
        '200':
          description: "Contato deletado com sucesso"
        '401':
          description: "User não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Client não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'

  /forgot-password:
    post:
      tags: 
        - "Auth"
      operationId: forgotPassword
      summary: Envio do Token para reset de password
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
              
      responses:
        '200': 
          description: 'Instruções de redefinição de senha enviadas para seu e-mail'
                         
        '400':
          description: 'Houve erros de validação'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'

        '401':
          description: 'Credenciais inválidas'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
  
  /login:
    post:
      tags: 
        - "Auth"
      operationId: login
      summary: Realizar login do usuário com as credenciais
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/LoginRequest'
              
      responses:
        '200': 
          description: 'Login realizado com sucesso'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TokenResponse'
                
        '400':
          description: 'Erros de validação de dados'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'

        '401':
          description: 'Credenciais inválidas'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
 
  /profile:
    get:
      tags: 
        - "Auth"
      security:
          - BearerAuth: []
      summary: Obtém o perfil do usuário autenticado
      description: Retorna as informações do usuário atualmente autenticado com base no token JWT.
      responses:
        200:
          description: Perfil do usuário retornado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nome:
                    type: string
                    example: "Tiago Hinterholz"
                  email:
                    type: string
                    example: "tiago@email.com"
        '401':
          description: 'Credenciais inválidas'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response' 
        '404':
          description: "Usuário não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
  
  /logout:
    post:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Invalida o token JWT do usuário logado
      description: Adiciona o token atual à blacklist para impedir seu uso futuro.
      responses:
        '200':
          description: Logout realizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout realizado com sucesso."
        '401':
          description: 'Credenciais inválidas'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'     
  
  /refresh-token:
    post:
      tags:
        - "Auth"
      operationId: refresh
      summary: Autenticar o usuário através do refresh token
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Autenticação realizada com sucesso
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TokenResponse' 
  
  /reset-password:
    post:
      tags: 
        - "Auth"
      operationId: resetPassword
      summary: Redefinição de password atraves de email e token
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
              
      responses:
        '200': 
          description: 'Senha redefinida com sucesso'
                         
        '400':
          description: 'Houve erros de validação'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'

        '401':
          description: 'Credenciais inválidas'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'

  /pets:
    post:
      tags:
        - 'Pets'
      operationId: cadastrarPet
      summary: Cadastro de Pets
      security:
        - JWT: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PetsRequest'
      responses:
        '201':
         description: "Pet cadastrado com sucesso"
         content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PetsResponse'
        '400':
          description: "Problema nos dados de cadastro"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuário não autenticado para esta operação"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response' 
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
    get:
      tags:
        - 'Pets'
      operationId: listarPets
      summary: Listagem de Pets
      security:
        - JWT: []
      responses:
        '200':
          description: "Listagem de pets realizada com sucesso"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetsResponse'
        '401':
          description: 'Usuário não autorizado'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
  
  /pets/{pet_id}:
    get:
      tags:
        - 'Pets'
      operationId: detalharPet
      summary: "Detalhar Pet pelo pet_id"
      parameters:
        - name: pet_id
          in: path
          description: "ID do pet a ser detalhado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      responses:
        '200':
          description: "Pet detalhado com sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetsResponse"
        '400':
          description: "Dados inseridos inválidos"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuario não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Pet não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
    put:
      tags:
        - 'Pets'
      summary: "Atualizar cadastro de Pet pelo pet_id"
      operationId: atualizarPet
      parameters:
        - name: pet_id
          in: path
          description: "ID do pet a ser atualizado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/PetsRequest"
      responses:
        '200':
          description: "Pet atualizado com sucesso"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PetsResponse'
        '400':
          description: "Dados inseridos inválidos"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuario não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Pet não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response' 
    delete:
      tags:
        - 'Pets'
      operationId: deletarPet
      summary: "Deletar Pet pelo pet_id"
      parameters:
        - name: pet_id
          in: path
          description: "ID do pet a ser deletado"
          required: true
          schema:
            type: integer
      security:
        - JWT: []
      responses:
        '200':
          description: "Pet deletado com sucesso"
        '401':
          description: "User não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Pet não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response' 

  /users:
    post:
      tags:
        - 'Users'
      operationId: cadastrarUser
      summary: Cadastro de Usuário
      description: |
        Permite o cadastro de novos usuários. 
        **Apenas administradores** podem acessar esta rota.
      security:
        - JWT: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UsersRequest'
      responses:
        '201':
         description: "User cadastrado com sucesso"
         content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UsersResponse'
        '400':
          description: "Problema nos dados de cadastro"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuário não autenticado para esta operação"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response' 
        '403':
          description: "Acesso negado. Apenas administradores podem cadastrar usuários."
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error403Response' 
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
    get:
      tags:
        - 'Users'
      operationId: listarUsers
      summary: Listagem de Usuários
      security:
        - JWT: []
      responses:
        '200':
          description: "Listagem de usuários realizada com sucesso"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UsersResponse'
        '401':
          description: 'Usuário não autorizado'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'        
  
  /users/{usercpf}:
    get:
      tags:
        - 'Users'
      operationId: detalharUser
      summary: "Detalhar Usuário pelo CPF"
      parameters:
        - name: usercpf
          in: path
          description: "CPF do Usuário a ser detalhado"
          required: true
          schema:
            type: string
      security:
        - JWT: []
      responses:
        '200':
          description: "Usuário detalhado com sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"
        '400':
          description: "Dados inseridos inválidos"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuario não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Usuário não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'   
    put:
      tags:
        - 'Users'
      summary: "Atualizar cadastro de Usuário pelo CPF"
      operationId: atualizarUser
      parameters:
        - name: usercpf
          in: path
          description: "cpf do Usuário a ser atualizado"
          required: true
          schema:
            type: string
      security:
        - JWT: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/UsersRequest"
      responses:
        '200':
          description: "Usuário atualizado com sucesso"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '400':
          description: "Dados inseridos inválidos"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: "Usuario não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Usuario não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response' 
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
    delete:
      tags:
        - 'Users'
      operationId: deletarUser
      summary: "Deletar Usuário pelo CPF"
      parameters:
        - name: usercpf
          in: path
          description: "Cpf do user a ser deletado"
          required: true
          schema:
            type: string
      security:
        - JWT: []
      responses:
        '200':
          description: "User deletado com sucesso"
        '401':
          description: "Usuário não autenticado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: "Usuário não encontrado"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: "Erro interno do servidor"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error500Response'
              
components:
  schemas:
    Error400Response:
      type: object
      properties:
        error:
          type: string
          example: "Campo obrigatório ausente."
    Error401Response:
      type: object
      properties:
        error:
          type: string
          example: "Token inválido ou expirado."
    Error403Response:
      type: object
      properties:
        error:
          type: string
          example: "Acesso negado para este recurso."
    Error404Response:
      type: object
      properties:
        error:
          type: string
          example: "Recurso não encontrado."
    Error409Response:
      type: object
      properties:
        error:
          type: string
          example: "E-mail ou CPF já cadastrados."
    Error422Response:
      type: object
      properties:
        error:
          type: string
          example: "CPF inválido."
    Error500Response:
      type: object
      properties:
        error:
          type: string
          example: "Erro inesperado no servidor."
        
    AddressesRequest:
      type: object
      required:
        - client_id
        - street
        - city
        - neighborhood
      properties:
        client_id:
          type: integer
          example: 1
        street:
          type: string
          maxLength: 50
          example: "Rua dos Pampas"
        city:
          type: string
          maxLength: 50
          example: "Brasília"
        neighborhood:
          type: string
          maxLength: 50
          example: "Bairro Biriquí"
        complement:
          type: string
          maxLength: 50
          exemplo: "Número 23"
    AddressesResponse:
      type: object
      properties:
        id:
         type: integer
        client_id:
          type: integer
        street:
          type: string
        city:
          type: string
        neighborhood:
          type: string
        complement:
          type: string
     
    AppointmentsRequest:
      type: object
      required:
        - pet_id
        - desc_appoint
        - price
        - date_appoint
      properties:
        pet_id:
          type: integer
          example: 1
        desc_appoint:
          type: string
          maxLength: 50
          example: "Banho e tosa"
        price:
          type: number
          format: float
          examploe: "550,00"
        date_appoint:
          type: string
          format: date
          example: "2025-05-31"
    AppointmentsResponse:
      type: object
      properties:
        id:
          type: integer
        pet_id:
          type: integer
        desc_appoint:
          type: string
        price:
          type: number
        date_appoint:
          type: string        
     
    BreedsRequest:
      type: object
      required:
        - description
      properties:
        description:
          type: string
          maxLength: 50
          example: "Gato Siamês / Cachorro Buldogue" 
    BreedsResponse:
      type: object
      properties:
        id:
         type: integer
        description:
          type: string
          maxLength: 50
           
    ClientsRequest:
      type: object
      required:
        - cpf
      properties:
        cpf:
          type: string
          maxLength: 14
          example: "000.000.000-00"         
    ClientsResponse:
      type: object
      properties:
        id:
          type: integer
        cpf:
          type: string
        name:
          type: string
        register_date:
          type: string
          format: dat
     
    ContactsRequest:
      type: object
      required:
        - client_id
        - type_contact
        - value_contact
      properties:
        client_id:
          type: integer
          example: 1
        type_contact:
          type: string
          enum:
            - email
            - telefone
          example: "email"
        value_contact:
          type: string
          maxLength: 100
          example: "tiago@email.com"     
    ContactsResponse:
      type: object
      properties:
        id:
          type: integer
        client_id:
          type: integer
        type_contact:
          type: string
        value_contact:
          type: string      

    LoginRequest:
      type: object
      required:
        - cpf
        - password
      properties: 
        cpf: 
          type: string
          example: "000.000.000-00"
        password:
          type: string
          format: password
          example: "admin123"
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string 
    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "email@example.com"
    ForgotPasswordResponse:
      type: object
      properties:
        message:
          type: string
          example: "Instruções de redefinição de senha enviadas para seu e-mail."
        reset_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    ResetPasswordRequest:
      type: object
      required:
        - token
        - new_password
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: "Token de recuperação de senha enviado por e-mail."
        new_password:
          type: string
          format: password
          minLength: 6
          example: "NovaSenha123"
          description: "Nova senha do usuário (mínimo 6 caracteres)."
    ResetPasswordResponse:
      type: object
      properties:
        message:
          type: string
          example: "Senha redefinida com sucesso."
 
    PetsRequest:
      type: object
      required:
        - client_id
        - breed_id
        - birth_date
        - name
      properties:
        client_id:
          type: integer
          example: 1
        breed_id:
          type: integer
          example: 5
        birth_date:
          type: string
          format: date
          example: "2020-01-25"
        name:
          type: string
          maxLength: 50
          example: "Tommy"       
    PetsResponse:
      type: object
      properties:
        id:
          type: integer
        client_id:
          type: integer
        breed_id:
          type: integer
        birth_date:
          type: string
          format: data
        name:
          type: string
       
    UsersRequest:
      type: object
      required:
        - cpf
        - name
        - profile
        - password
        - email
      properties:
        cpf:
          type: string
          maxLength: 14
          example: "000.000.000-00"
        name:
          type: string
          maxLength: 100
          example: "Fulano da Silva Sauro"
        profile:
          type: string
          enum:
            - admin
            - client
          example: "admin"
        password:
          type: string
          format: password
          example: "admin1234"
        email:
          type: string
          maxLength: 120
          format: email
          example: "meuemail@email.com"
    UsersResponse:
      type: object
      properties:
        cpf:
          type: string
          example: "000.000.000-00"
        name:
          type: string
          example: "Fulano da Silva Sauro"
        profile:
          type: string
          example: "admin"
        email:
          type: string
          example: "meuemail@email.com"       

  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT  

        
          
  
